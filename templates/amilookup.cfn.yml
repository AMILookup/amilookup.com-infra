AWSTemplateFormatVersion: "2010-09-09"
Description: AMI Lookup CloudFormation templates
Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  env:
    Type: String
    Description: Environment Name
    Default: dev
  ArtifactsBucket:
    Type: String
    Description: Artifacts s3 bucket
    Default: dev-amilookup-artifacts
  TemplateBucketS3URL:
    Type: String
    Description: s3 URL
    Default: s3.us-east-1.amazonaws.com
  TemplateBucketName:
    Type: String
    Description: S3 Bucket Hosting Templates
    Default: dev-amilookup-artifacts
  TemplateBucketPrefix:
    Type: String
    Description: S3 Templates Bucket Prefix
    Default: functions

Globals:
  Function:
    Runtime: python3.7
  Api:
    EndpointConfiguration: REGIONAL
    Cors: "'dev.amilookup.com'"

Resources:
  amilookupGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref env
      DefinitionBody: |
        swagger: "2.0"
        info:
          description: "This is the api for amilookup.com"
          version: "0.0.1"
          title: "AMI Lookup API"
          contact:
            email: "dorkmeisterx69@gmail.com"
          license:
            name: "GNU GENERAL PUBLIC LICENSE 3.0"
            url: "https://opensource.org/licenses/GPL-3.0"
        host: "virtserver.swaggerhub.com"
        basePath: "/Jackson-Consulting/Ami-Lookup/1.0.0"
        tags:
        - name: "ami"
          description: "For making calls to ami functions"
        - name: "db"
          description: "For making calls to db functions"
        schemes:
        - "https"
        paths:
          /ami:
            get:
              tags:
              - "ami"
              summary: "searches for ami"
              description: "By passing in the appropriate options, you can search against\n\
                all ami's.\n"
              operationId: "ami"
              produces:
              - "application/json"
              parameters:
              - name: "id"
                in: "query"
                description: "pass an ami id to search by"
                required: false
                type: "string"
              - name: "name"
                in: "query"
                description: "pass an ami name to search by"
                required: false
                type: "string"
              responses:
                200:
                  description: "search results matching criteria"
                  schema:
                    type: "array"
                    items:
                      $ref: "#/definitions/amiItem"
                400:
                  description: "bad input parameter"
        definitions:
          amiItem:
            type: "object"
            required:
            - "id"
            - "name"
            properties:
              id:
                type: "string"
                example: "ami-12345678"
              name:
                type: "string"
                example: "Amazon Linux AMI"
            example:
              name: "Amazon Linux AMI"
              id: "ami-12345678"

  amilookupFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: ami_lookup.lambda_handler
      CodeUri:
        Bucket: !Ref TemplateBucketName
        Key: !Sub ${TemplateBucketPrefix}/ami_lookup.zip
      Policies:
        - Statement:
          - Sid: AssumeRole
            Effect: Allow
            Action:
              - sts:AssumeRole
            Resource: "*"
          - Sid: CheckInstances
            Effect: Allow
            Action:
              - ec2:DescribeRegions
              - ec2:DescribeInstances
            Resource: "*"
      Events:
        amilookupApi:
            Type: Api
            Properties:
                Path: /ami
                Method: POST
  dbreadFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: db_read.lambda_handler
      CodeUri:
        Bucket: !Ref TemplateBucketName
        Key: !Sub ${TemplateBucketPrefix}/db_read.zip
