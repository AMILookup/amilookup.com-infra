AWSTemplateFormatVersion: "2010-09-09"
Description: AMI Lookup CloudFormation templates
Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  env:
    Type: String
    Description: Environment Name
    Default: dev
  ArtifactsBucket:
    Type: String
    Description: Artifacts s3 bucket
    Default: dev-amilookup-artifacts
  TemplateBucketS3URL:
    Type: String
    Description: s3 URL
    Default: s3.us-east-1.amazonaws.com
  TemplateBucketName:
    Type: String
    Description: S3 Bucket Hosting Templates
    Default: dev-amilookup-artifacts
  TemplateBucketPrefix:
    Type: String
    Description: S3 Templates Bucket Prefix
    Default: functions

Globals:
  Function:
    Runtime: python3.7
  Api:
    EndpointConfiguration: REGIONAL
    Cors: "'dev.amilookup.com'"

Resources:
  amilookupGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref env
      DefinitionBody: |
        /ami:
          x-amazon-apigateway-any-method:
            responses: {}
            x-amazon-apigateway-integration:
              uri:
                Fn::Join:
                - ''
                - - Fn::Sub: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:${AWS::AccountId}
            - :function:${amilookupFunction}/invocations
              passthroughBehavior: "when_no_match"
              httpMethod: "POST"
              type: "aws"
          options:
            consumes:
            - application/json
            produces:
            - application/json
            responses:
              '200':
                description: 200 response
                schema:
            $ref: "#/definitions/Empty"
                headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
            x-amazon-apigateway-integration:
              responses:
                default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              passthroughBehavior: when_no_match
              requestTemplates:
                application/json: "{\"statusCode\": 200}"
              type: mock
  amilookupFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: ami_lookup.lambda_handler
      CodeUri:
        Bucket: !Ref TemplateBucketName
        Key: !Sub ${TemplateBucketPrefix}/ami_lookup.zip
      Policies:
        - Statement:
          - Sid: AssumeRole
            Effect: Allow
            Action:
              - sts:AssumeRole
            Resource: "*"
          - Sid: CheckInstances
            Effect: Allow
            Action:
              - ec2:DescribeRegions
              - ec2:DescribeInstances
            Resource: "*"
      Events:
        amilookupApi:
            Type: Api
            Properties:
                Path: /ami
                Method: POST
  dbreadFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: db_read.lambda_handler
      CodeUri:
        Bucket: !Ref TemplateBucketName
        Key: !Sub ${TemplateBucketPrefix}/db_read.zip
