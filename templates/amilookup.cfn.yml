AWSTemplateFormatVersion: "2010-09-09"
Description: AMI Lookup CloudFormation templates
Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  env:
    Type: String
    Description: Environment Name
    Default: dev
  amilookupFunctionKey:
    Type: String
    Description: Key for s3 object for this function.
    Default: ami_lookup.zip
  ArtifactsBucket:
    Type: String
    Description: Artifacts s3 bucket
    Default: dev-amilookup-artifacts
  IOPipeLayer:
    Type: String
    Description: IOPipe.io layer for integration.
    # Default: arn:aws:lambda:us-east-1:146318645305:layer:IOpipePython:5
  ParentStackName:
    Type: String
    Description: Parent CloudFormation Stack Name
  TemplateBucketS3URL:
    Type: String
    Description: s3 URL
  TemplateBucketName:
    Type: String
    Description: S3 Bucket Hosting Templates
  TemplateBucketPrefix:
    Type: String
    Description: S3 Templates Bucket Prefix
  WebsiteUrl:
    Type: String
    Description: WebsiteURL for CORS
    Default: dev.amilookup.com

Globals:
  Function:
    Runtime: python3.7
    Layers:
      - !Ref IOPipeLayer
  Api:
    EndpointConfiguration: REGIONAL
    Cors: !Sub "'${WebsiteUrl}'"

Resources:
  # cacheTable:
  #   Type: AWS::DynamoDB::Table
  #   Properties:
  #     AttributeDefinitions:
  #       - AttributeName: "ImageId"
  #         AttributeType: "S"
  #       - AttributeName: "Description"
  #         AttributeType: "S"
  #       - AttributeName: "CreateTimestamp"
  #         AttributeType: "S"
  #     KeySchema:
  #       - AttributeName: "ImageId"
  #         KeyType: "HASH"
  #       - AttributeName: "CreateTimestamp"
  #         KeyType: "RANGE"
  #     ProvisionedThroughput:
  #       ReadCapacityUnits: 5
  #       WriteCapacityUnits: 5
  #     LocalSecondaryIndexes:
  #       - IndexName: "ImageId"
  #         KeySchema:
  #           - AttributeName: "ImageId"
  #             KeyType: "HASH"
  #           - AttributeName: "CreateTimestamp"
  #             KeyType: "RANGE"
  #         Projection:
  #           ProjectionType: ALL
  #     LocalSecondaryIndexes:
  #       - IndexName: "Description"
  #         KeySchema:
  #           - AttributeName: "ImageId"
  #             KeyType: "HASH"
  #           - AttributeName: "Description"
  #             KeyType: "RANGE"
  #         Projection:
  #           ProjectionType: ALL
  amilookupApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref env
      DefinitionBody:
        swagger: "2.0"
        info:
          version: "1.0"
          title: !Sub "${env}-AMILookup"
        host: !Sub "apigateway.${AWS::Region}.amazonaws.com"
        basePath: "/"
        schemes:
        - "https"
        paths:
          /ami:
            post:
              produces:
              - "application/json"
              responses:
                '200':
                  description: "200 response"
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${amilookupFunction}/invocations"
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
          options:
            summary: CORS support
            description: |
              Enable CORS by returning correct headers
            consumes:
              - application/json
            produces:
              - application/json
            tags:
              - CORS
            x-amazon-apigateway-integration:
              type: mock
              requestTemplates:
                application/json: |
                  {
                    "statusCode" : 200
                  }
              responses:
                "default":
                  statusCode: "200"
                  responseParameters:
                    method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                    method.response.header.Access-Control-Allow-Methods : "'*'"
                    method.response.header.Access-Control-Allow-Origin : !Sub "'${WebsiteUrl}'"
                  responseTemplates:
                    application/json: |
                      {}
            responses:
              "200":
                description: Default response for CORS method
                headers:
                  Access-Control-Allow-Headers:
                    type: "string"
                  Access-Control-Allow-Methods:
                    type: "string"
                  Access-Control-Allow-Origin:
                    type: "string"
  amilookupFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: iopipe.handler.wrapper
      CodeUri:
        Bucket: !Ref TemplateBucketName
        Key: !Sub ${TemplateBucketPrefix}/${amilookupFunctionKey}
      Environment:
        IOPIPE_HANDLER: ami_lookup_lambda_handler
      AutoPublishAlias: live
      MemorySize: 128
      Timeout: 15
      Policies:
        - Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Resource: "*"
          - Effect: Allow
            Action:
              - logs:*
            Resource: "*"
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
            Resource: "arn:aws:s3:::*"
          - Effect: Allow
            Action:
              - ec2:DescribeImage*
            Resource: "*"
  amilookupFunctionPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref amilookupFunction
      Principal: apigateway.amazonaws.com
Outputs:
  amilookupFunction:
    Value: !Ref amilookupFunction
